

core java : upto jdbc
_____________________
In addition to implementing the List interface, which of the following also provides methods to get,
 add and remove elements from the head and tail of the list without specifying an index? 
      A	Collection
      B	Array List
      C	Linked List
      D	Vector
      E	None of the above
      F	List




 Ans: C



 Which Object will u use to iterate through a collection in forward and backward directions?
      A	Iterator
      B	ListIterator
      C	SetIterator
      D	None





Ans:  B




Q: Exception can be thrown using following
      A	Throw
      B	Throws
      C	Try
      D	Catch
      E	 Finally

Ans: A


Q The __________ qualifier is used to declare read only variables.
      A	static 
      B	const
      C	final
      D	transient
      E	none
Ans: C


Q :	What is the advantage of using import statements?	
      A	 To avoid having to declare variables 	
      B	 To refer to a class without using prefixes. 	
      C	 To avoid calling methods
      D	To import the images you want to use. 	
Ans: B


IO Exception is a not a subclass of Runtime Exception.	
       A True
       B False	
Ans: A







Q 1A package is	
      A	A collection of interfaces.	
      B	 A collection of classes	
      C	 A way to provide naming for a group of related classes.	
      D	All the above	
Ans: D

Q 13:If you want to add an object to TreeSet, Which interface should that class implement?	
     A Serializable
    B Comparable
    C Externalizable
    D Set	
Ans:B

Q 14:	Which modifier would be used to limit the methods visibility to only the other classes   in the current package and all subclasses?	
      A	public
      B	private	
      C	protected	
      D	default	
Ans : C




Q2. Consider code :
public class Foof{
public static void main(String str[]){
	String s=new String (null);
	System.out.print(s);
	}
}
What is the result of compilation or execution of the code?
A. Print null.
B. Print nothing
C. Compilation error
D. Runtime error

Q3. public class Demo {
	public static void main(String[] args) {
		System.out.println(returnSomething());
	}
	private static int returnSomething() {
		try{
			return 6;
		}finally{
			return 9;
		}
	}
}

What is the result of compilation or execution of the code?
  A. Prints 9
  B. Results in compilation error
  C. Results in runtime error
  D. Print 6

Q4. What will be the result of compiling and running the following code?
class Base {
	public Double getValue() {
		return 1.0;// 1
	} 
}
class Base2 extends Base {
	public Number getValue() {
		return null;// 2
	} 
}
public class Demo4 {
	public static void main(String[] args) {
		Base b = new Base2();
		System.out.println(b.getValue()); // 3
	}
}
Select 1 option
A. It will print 1
B. It will print 2.
C. Compile time error at //1
D. Compile time error at //2


Q5.  Which of the following are valid classes?

Select 1 option
A. public class ImaginaryNumber extends Number {
}
B. public class ThreeWayBoolean extends Boolean {
}
C. public class NewSystem extends System {
}
D. public class ReverseString extends String {
}


Q6. 
class A {
	public static void f() {
		System.out.println("fA");
	}
}

class B extends A {
	public void f() {
		System.out.println("fB");
	}
	public static void main(String[] args) {
		A a = new B();
		a.f();
	}
}


What will happen on compilation or execution of code?
        A. fA 
        B. fB 
        C. Code will not compile
        D. Code will throw runtime error

Q7. What will be the result of attempting to compile and run the following program?
public class TestClass {
	public static void main(String args[]) {
		A o1 = new C();
		B o2 = (B) o1;
		System.out.println(o1.m1());
		System.out.println(o2.i);
	}
}
class A { int i = 10; int m1( ) { return i; } }
class B extends A { int i = 20; int m1() { return i; } }
class C extends B { int i = 30; int m1() { return i; } }
Select 1 option
A. The program will fail to compile.
B. Class cast exception at runtime.
C. It will print 30, 20.
D. It will print 30, 30.
E. It will print 20, 20.


Q8. Which of the following statements are true?
A. Private methods cannot be overridden in subclasses.
B. A subclass can override any method of a non-final superclass.
C. An overriding method can declare that it throws a wider spectrum of checked
exceptions than the method it is overriding.
D. The parameter list of an overriding method must be a subset of the parameter list of
the method that it is overriding.

Q9. class Base {
	public static void foo(Base bObj) {
		System.out.println("In Base.foo()");
		bObj.bar();
	}

	public void bar() {
		System.out.println("In Base.bar()");
	}
}

class Derived extends Base {
	public static void foo(Base bObj) {
		System.out.println("In Derived.foo()");
		bObj.bar();
	}

	public void bar() {
		System.out.println("In Derived.bar()");
	}
}

class OverrideTest {
	public static void main(String[] args) {
		Base bObj = new Derived();
		bObj.foo(bObj);
	}
}
What is the output of this program when executed?
a)
In Base.foo()
In Base.bar()
b)
In Base.foo()
In Derived.bar()
c)
In Derived.foo()
In Base.bar()
d)
In Derived.foo()
In Derived.bar()


Q10. 
class Tree {
	Tree getInstance() {
		return new Tree();
	}
}

class Fruit extends Tree {
	// line 1
}
class Mango extends Fruit {
}

Which statement(s), inserted at line 1, will NOT compile?
    A. Fruit getInstance() { return this;} 
    B. Mango getInstance() { return this;} 
    C. Tree getInstance() { return this;} 
    D. Object getInstance() { return this;} 


Q11. Consider following example:
interface xyz {
	void abc() throws IOException;
}

interface pqr {
	void abc() throws FileNotFoundException;
}

class Implementation implements xyz, pqr {
  public void abc() throws IOException
	{
		/* implementation */ 
	}
}

Which of the following statement(s) can you insert in place of “// insert code” comment?
A. public void abc() throws IOException
B. public void abc() throws FileNotFoundException
C. public void abc() throws FileNotFoundException, IOException
D. public void abc() throws IOException, FileNotFoundException


Q12. Consider the following program:
class ExceptionTest {
	public static void foo() {
		try {
			throw new ArrayIndexOutOfBoundsException();
		} catch (ArrayIndexOutOfBoundsException oob) {
			throw new Exception(oob);
		}
	}

	public static void main(String[] args) {
		try {
			foo();
		} catch (Exception re) {
			System.out.println(re.getCause());
		}
	}
}

Which one of the following options correctly describes the behavior of this program?
A. java.lang.Exception
B. java.lang.ArrayIndexOutOfBoundsException
C. class java.lang.IllegalStateException
D. T his program fails with compiler error(s)


Q13. Which are true? (Choose all that apply.)
A. "X extends Y" is correct if and only if X is a class and Y is an interface.
B. "X extends Y" is correct if and only if X is an interface and Y is a class.
C. "X extends Y" is correct if X and Y are either both classes or both interfaces.
D. "X extends Y" is correct for all combinations of X and Y being classes and/or interfaces.

Q14. . Given:
class Rocket {
	private void blastOff() {
		System.out.print("bang ");
	}
}
public class Shuttle extends Rocket {
	public static void main(String[] args) {
		new Shuttle().go();
	}
	void go() {
		blastOff();
		// Rocket.blastOff(); // line A
	}
	private void blastOff() {
		System.out.print("sh-bang ");
	}
}

Which are true?
A. As the code stands, the output is bang
B. As the code stands, the output is sh-bang
C. As the code stands, compilation fails.
D. If line A is uncommented, the output is bang bang


Q15. 
interface Gadget {
	void doStuff();
}

abstract class Electronic {
	void getPower() {
		System.out.print("plug in ");
	}
}

public class Tablet extends Electronic implements Gadget {
	void doStuff() {
		System.out.print("show book ");
	}

	public static void main(String[] args) {
		new Tablet().getPower();
		new Tablet().doStuff();
	}
}

Which are true? (Choose all that apply.)
A. The class Tablet will NOT compile
B. The interface Gadget will NOT compile
C. The output will be plug in show book
D. The abstract class Electronic will NOT compile

Q16. import java.util.*;
class UtilitiesTest {
	public static void main(String[] args) {
		List<int> intList = new ArrayList<>();
		intList.add(10);
		intList.add(20);
		System.out.println("The list is: " + intList);
	}
}

A. It prints the following: The list is: [10, 20].
B. It prints the following: The list is: [20, 10].
C. It results in a compiler error.
D. It results in a runtime exception.

Q17. public class Confusion {
	public Confusion(Object o){
		System.out.println("public Confusion(Object o)");
	}
	public Confusion(double[] o){
		System.out.println("public Confusion( double[] o)");
	}	
	public static void main(String[] args) {
		new Confusion(null);
	}	
}
What will the output ?
    1. Compilation error
    2. Runtime error
    3. Will print:    public Confusion( double[] o)
    4. Will print:    public Confusion(Object o)


Q18. Predict the outcome of the following program:
public class ParseString1 {
	public static void main(String[] s) {
		String quote = "Never lend books-nobody ever returns them!";
		String[] words = quote.split("  ", 2);
// split strings based on the delimiter " " (space)
		for (String word : words) {
			System.out.println(word);
		}
	}
}

A. It will result in a compile-time error.
B. It will result in a runtime exception.
C. It will print the following output when executed
Never lend
D. It will print the following output when executed
Never 
lend books-nobody ever returns them!


Q19 . What is not true about java interface
    1. We can not define instance variable inside Java interface 
    2. We can define constant inside java interface
    3. We can have constructor inside java interface
    4. All are correct


Q20. class Cat{public static String foo="value";}
class CostlyCat extends Cat{
	 private static String foo="value2";
}
public class Demo {
	public static void main(String[] args) {
		System.out.println(new CostlyCat().foo);
	}
}
What is the result of compilation and execution of the code? 
    A. Compilation error
    B. Print value
    C. Print value2
    D. Run time error



public class Foof{
public static void main(String str[]){
	String s=new String (null);
	System.out.print(s);
	}
}
What is the result of compilation or execution of the code?
A. Print null.
B. Print nothing
C. Compilation error
D. Runtime error



 What will be the result of compiling and running the following code?

class Base {
	public Double getValue() {
		return 1.0;// 1
	} 
}
class Base2 extends Base {
	public Number getValue() {
		return null;// 2
	} 
}
public class Demo4 {
	public static void main(String[] args) {
		Base b = new Base2();
		System.out.println(b.getValue()); // 3
	}
}

Select 1 option
A. It will print 1
B. It will print 2.
C. Compile time error at //1
D. Compile time error at //2


Which of the following are valid classes?

Select 1 option
A. abstract public class ImaginaryNumber extends Number {
}
B. public class ThreeWayBoolean extends Boolean {
}
C. public class NewSystem extends System {
}
D. public class ReverseString extends String {
}






class A {
	public static void f() {
		System.out.println("fA");
	}
}

class B extends A {
	public void f() {
		System.out.println("fB");
	}

	public static void main(String[] args) {
		A a = new B();
		a.f();
	}
}

What will happen on compilation or execution of code?
        A. fA 
        B. fB 
        C. Code will not compile
        D. Code will throw runtime error







Which of the following statements are true?
A. Private methods cannot be overridden in subclasses.
B. A subclass can override any method of a non-final superclass.
C. An overriding method can declare that it throws a wider spectrum of checked
exceptions than the method it is overriding.
D. The parameter list of an overriding method must be a subset of the parameter list of
the method that it is overriding.








class Base {
	public static void foo(Base bObj) {
		System.out.println("In Base.foo()");
		bObj.bar();
	}

	public void bar() {
		System.out.println("In Base.bar()");
	}
}

class Derived extends Base {
	public static void foo(Base bObj) {
		System.out.println("In Derived.foo()");
		bObj.bar();
	}

	public void bar() {
		System.out.println("In Derived.bar()");
	}
}

public class OverrideTest {
	public static void main(String[] args) {
		Base bObj = new Derived();
		bObj.foo(bObj);
	}
}
What is the output of this program when executed?
a)
In Base.foo()
In Base.bar()
b)
In Base.foo()
In Derived.bar()
c)
In Derived.foo()
In Base.bar()
d)
In Derived.foo()
In Derived.bar()







class Tree {
	Tree getInstance() {
		return new Tree();
	}
}

class Fruit extends Tree {
	// line 1
}

class Mango extends Fruit {
}

Which statement(s), inserted at line 1, will NOT compile?
    A. Fruit getInstance() { return this;} 
    B. Mango getInstance() { return this;}  X
    C. Tree getInstance() { return this;} 
    D. Object getInstance() { return this;}  X








Consider following example:


interface xyz {
	void abc() throws IOException;
}

interface pqr {
	void abc() throws FileNotFoundException;
}

class Implementation implements xyz, pqr {
   // insert code
	{
		/* implementation */ 
	}
}

Which of the following statement(s) can you insert in place of “// insert code” comment?
A. public void abc() throws IOException
B. public void abc() throws FileNotFoundException
C. public void abc() throws FileNotFoundException, IOException
D. public void abc() throws IOException, FileNotFoundException




Consider the following program:

class ExceptionTest {
	public static void foo() {
		try {
			throw new ArrayIndexOutOfBoundsException();
		} catch (ArrayIndexOutOfBoundsException oob) {
			throw new Exception(oob);
		}
	}

	public static void main(String[] args) {
		try {
			foo();
		} catch (Exception re) {
			System.out.println(re.getCause());
		}
	}
}

Which one of the following options correctly describes the behavior of this program?
A. java.lang.Exception
B. java.lang.ArrayIndexOutOfBoundsException
C. class java.lang.IllegalStateException
D. This program fails with compiler error(s)




interface Gadget {
	public static final Car car=new Car();
	void doStuff();
}

abstract class Electronic {
	void getPower() {
		System.out.print("plug in ");
	}
}

public class Tablet extends Electronic implements Gadget {
	void doStuff() {
		System.out.print("show book ");
	}

	public static void main(String[] args) {
		new Tablet().getPower();
		new Tablet().doStuff();
	}
}

Which are true? (Choose all that apply.)
A. The class Tablet will NOT compile
B. The interface Gadget will NOT compile
C. The output will be plug in show book
D. The abstract class Electronic will NOT compile





import java.util.*;
class UtilitiesTest {
	public static void main(String[] args) {
		List<int> intList = new ArrayList<>();
		intList.add(10);
		intList.add(20);
		System.out.println("The list is: " + intList);
	}
}

A. It prints the following: The list is: [10, 20].
B. It prints the following: The list is: [20, 10].
C. It results in a compiler error.
D. It results in a runtime exception.


What is not true about java interface
    1. We can not define instance variable inside Java interface 
    2. We can define constant inside java interface
    3. We can have constructor inside java interface
    4. All are correct



------------------------------

public static void main(){
	int Object =90;// ok bad code

}

covarient return tyre: Java 5

class X{
}

class Y extends X{
}

class A{
	 public X foo(){
		return null;
	}
}

class B extends A{

	 public Y foo(){
		return null;
	}
}



A a=new B();
a.foo();

				Number 

		Integer 		Float 	Double 		Long
class A{
	 public byte foo(){
		return null;
	}
}

class B extends A{

	 public int foo(){
		return null;
	}
}





class A extends Integer{
	 //..
}

Day 1: fundamental questions/baics questions:
------------------------------------------

what is the op?
------------
long a=9958543978;
System.out.println(a);


what is the op?
-----------------
char i=97; //storing int into char
System.out.println(i);
	

char i='A'; //storing  char
System.out.println(i);



What is the op?
---------------
	byte i=33;
	byte j=22;
	byte k=i+j;
	System.out.println(k);
	    

Note : range of byte (8 bits): -178 0 to +128


what is the op?
---------------
	  int $=44;
	  System.out.println($);



How to write a program to call main twice?
----------------------------------------
Hint: static init  block


What happens if we comment 
------------------------------
// \u000d System.out.println("i love java");





Can we comment Unicode Carriage Return?



What is the op?
------------
		int String =33;
		System.out.println(String);



	


What is the op?
--------------	
public class Demo3 {
	
	public static void main(String[] args) {
		System.out.println("500");
		System.exit(0);
		System.out.println("600");
	}

}



What is the op?
---------------

enum Enums{
	A,B,C;
	private Enums(){
		System.out.println("10");
	}
}
public class Demo3 {
	
	public static void main(String[] args) {
		Enums e=Enums.B;
	}

}






What is the op?
------------
public class Demo5 {
	public static void main(String[] args) {
		final int a=2, b=3;
		while(a<b){
			System.out.println("hello");
		}
		System.out.println("bye");
	}
}











Q1


public class Person{
     public String name;
public static void main(String str[]){
  Person p=null;
   System.out.print(p instanceof Person);
}


What is the result of compilation or execution of the code?
1. Prints false
2. Prints true
3. Results in compilation error
4. Results in runtime error


Q2. Which of these statements are true?

A. If a RuntimeException is not caught, the method will terminate and normal
execution of the thread will resume.
B. An overriding method must declare that it throws the same exception classes as the
method it overrides.
C. The main method of a program can declare that it throws checked exceptions.
D. finally blocks are executed if and only if an exception gets thrown while inside the
corresponding try block.










Q3. Which of the following is false?
A. Class name and constructor name must be same
B. Constructor does not have return type
C. Constructor must be public
D. Constructor cannot be static










Q4. What will be the result of compiling and running the following code?
class Base{
public short getValue(){ return 1; } //1
}
class Base2 extends Base{
public byte getValue(){ return 2; } //2
}
public class TestClass{
public static void main(String[] args){
Base b = new Base2();
System.out.println(b.getValue()); //3
}
}
Select 1 option
A. It will print 1
B. It will print 2.
C. Compile time error at //1
D. Compile time error at //2


Q5.  Which of the following are valid classes?

Select 1 option

A.abstract public class ImaginaryNumber extends Number {
}
B. public class ThreeWayBoolean extends Boolean {
}
C. public class NewSystem extends System {
}
D. public class ReverseString extends String {
}



Q8. Which of the following statements are true?

A. Private methods cannot be overridden in subclasses.

B. A subclass can override any method of a non-final superclass.

C. An overriding method can declare that it throws a wider
 spectrum of checked exceptions than the method it is overriding.

D. The parameter list of an overriding method must be a 
 subset of the parameter list of
 the method that it is overriding.







What is the op?
---------------------

class T{
	public static final int temp=100;
	static {
		System.out.println(" i am static block");
	}
}
public class Demo {

	public static void main(String[] args) {
		
		System.out.println(T.temp);
	}
}




Ex: what is the op?

String demo="one"+2*2+"threee";
























What happens if remove final?



What happens?

public class Demo {

	Demo(){
		System.out.println("inside ctr");
	}
	Demo demo=new Demo();
	public static void main(String[] args) {
		
		new Demo();
		
	}
}











interface A{
	public static final int i=0;
	void foo();
}
abstract class B implements A{
   void foo(){
  }
}








default void foof(){}
static void foofStatic(){}



What is the o/p?
------------------
public class DemoInteger {
	
	public static void main(String[] args) {
		Integer i1=127;
		Integer i2=127;
		System.out.println(i1==i2);
		
		Integer i3=128;
		Integer i4=128;
		System.out.println(i3==i4);
	}
}







// Integer.valueOf();
Integer cache ( for performance)



call by val vs call by ref
---------------------------
call by v value vs call by ref


null with static method : What will be the O/P?
------------------

class A{
	public static void foo(){
		System.out.println(" i am static  method");
	}
}
public class DemoStatic {
	public static void main(String[] args) {
		A a=null;
		a.foo();	
	}
}






class A1{
	void foof(String a){
		System.out.println("void foof(String a)");
	}
	void foof(Integer a){
		System.out.println("void foof(Integer a)");
	}
}
public class DemoOverloading {

	public static void main(String[] args) {
		A1 a=new A1();
		a.foof(null);
	}

}








Which code with compile?
-----------------------------
	function overloading

		Integer val=new Integer(null);
		String s=new String (null);







ambigous ctr call
------------------
What if i run it?








What is the op?
---------------------


		Set<String> s=new HashSet<String>();
		s.add("QA");
		s.add("dev");
		System.out.println(s);

		
		Set<String> s2=new HashSet<String>(){{
			add("QA"); 
			s.add("dev");
		}};
		
		System.out.println(s2);














		=> double brace init {{ }}
		=> first brace create an annomous class and inner brace is used to init....... 





What is the op?
--------------------

public class DemoNeverWriteThisCode {

	public static void main(String[] args) {

		System.out.println(returnSomething());
		
	}

	private static int returnSomething() {
		try{
			return 5;// throws new NullPointerException();
		}finally{
			return 9;
		}
	}

}










	=>maigic of finally
	=>never ever return value from finally block ? why? 





autoboxing, int and wrapper classes
----------------------------------

What is the op?
---------------

		Long l=new Long(0);
		System.out.println(l.equals(0));









What is the O/P?
-----------------
class Cat{
	public static void meow(){
		System.out.println("meow");
	}
}

class CostlyCat extends Cat{
	public static void meow(){
		System.out.println("costly meow");
	}
}
public class DemoStaticMethod {
	public static void main(String[] args) {
		Cat c=new CostlyCat();
		c.meow();
	}


}





What is the O/P?
-----------------



class Cat{
	public static String foo="value";
}

class CostlyCat extends Cat{
	 private static String foo="value2";
}
public class Demo {

	public static void main(String[] args) {

		System.out.println(new CostlyCat().foo);
	}
}





	=>hiding superclass variable method























What is the O/P?
-----------------

Autoboxing, Inheritance and Overriding
--------------------------------------
class A{
	
	void method(int i){
		System.out.println("base method ");
	}
}
class B extends A{
	void method(Integer i){
		System.out.println("overriden method ");
	}
	
}
public class DemoOverloadingVsOverriding {

	public static void main(String[] args) {
		A a=new B();
		a.method(22);
	}
}
















Constructor overloading and NULL
---------------------------------

What is the op?
------------------


public class Confusion {

	public Confusion(Object o){
		System.out.println("public Confusion(Object o)");
	}
	
	public Confusion(double[] o){
		System.out.println("public Confusion( double[] o)");
	}
			
	public static void main(String[] args) {
		
		new Confusion(null);
		
	}
	
}












character addition, subtraction
-------------------------------

		System.out.println("H" + "i");
		System.out.println('H'+'i');

	// on add of char java convert them to there ascii value






















What is the op?
------------------

	class Foo {
		private int i;
	
		public Foo(int i) {
			this.i = i;
		}
	
		public boolean equals(Foo obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Foo other = (Foo) obj;
			if (i != other.i)
				return false;
			return true;
		}
	
	}
	
	public class Confusion {
	
		public static void main(String[] args) {
	
			Object f1 = new Foo(22);
			Object f2 = new Foo(22);
			
			System.out.println(f1==f2);
	
		}
	
	}





double subtraction and BigDecimal
----------------------------------
double 
1.0000000000000
1.0

What is the op?
-------------

		double d=1.1-1.00;
		
		if(d==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");


















	Why?

	=> never compare double , float , object with ==
	=> actual value of d is not 0.10

	What to do?
	---------
	=> if you want to manipulate double never use double / float
	use BigDecimal class

	Correct approach?
	----------------
	BigDecimal d2=new BigDecimal("1.10").subtract(new BigDecimal("1.00"));
		System.out.println(d2);
		
		
		if(d2.doubleValue()==0.10)
			System.out.println("hello");
		else
			System.out.println("hi");














What is the op?
---------------------

public class Confusion {
	private static Random random=new Random();
	public static void main(String[] args) {
		StringBuffer word=null;
		switch (random.nextInt(5)) {
		case 1:
			word=new StringBuffer('M');
			break;

		default:
			word=new StringBuffer('N');
		}
	
		word.append('a');
		word.append('b');
		
		System.out.println(word);
	}

}







	=> StringBuffer Constructor and Char








Random with seed
-----------------
What is the op?
-----------------

public class Confusion {

	public static void main(String[] args) {
		
		Set<Integer> s=new HashSet<Integer>();
		
		for(int i=0;i<100;i++)
			s.add(myMethod());
	}

	private static Integer myMethod() {
		return new Random(12345678L).nextInt();
	}

}



What is the op?
----------------
	
	class MyEx extends Exception {
		int details;
	
		MyEx(int a) {
			details = a;
		}
	
		public String toString() {
			return "details";
		}
	}
	
	public class DemoException {
	
		static void compute(int a) throws MyEx {
	
			throw new MyEx(a);
		}
	
		public static void main(String[] args) {
			try {
				compute(3);
			} catch (ArithmeticException ex) {
				System.out.println(ex);
			}
		}
	}



What is the op?
----------------
	
	public class Main_arg {
		
		public static void main(String[] args) {
			
			String[][]arguments=new String[2][2];
			int x;
			arguments[0]=args;
			x=arguments[0].length;
			
			for(int y=0; y< x; y++){
				System.out.println(" "+arguments[0][y]);
			}
		}
	
	}
















Why op?
Correct approach:

return new Random().nextInt();












What is the op?
------------------

class String {
}

public class SimpleCode {
	public static void main(String[] args) {
		System.out.println("hi");
	}

}





What is the op?
--------------
		final int a=10, b=20;
		
		while(a<b){
			System.out.println("hello");
		}
	

		System.out.println("world");




What is the op?
-----------------
		
		String[][]arguments=new String[2][2];
		int x;
		arguments[0]=args;
		x=arguments[0].length;
		
		for(int y=0; y< x; y++){
			System.out.println(" "+arguments[0][y]);
		}



what is the op?
-------------

		StringBuffer sb=new StringBuffer('A');
		sb.append("C");
		System.out.println(sb);





What is the op?
-----------------
	String s="abc technologies";
		s.toUpperCase();
		System.out.println(s);
		
		System.out.println(s.indexOf("te"));
		
									 
	StringBuffer sb=new StringBuffer("ABCDE");
		//sb.setCharAt(3, 'X');
		sb.replace(2, 3, "PP");
		System.out.println(sb.toString());




Q: how to print no of occurance of an particular char in a string?
 Ex: i love java find no of no of occurance of a?

Q. How to print reverse of an string
Q. Checking for pallindrom 
Q. Reverse the string as explained:
	i love java and teaching

 Ex1:	teaching and java love i
 Ex2:   gnihcaet dna avaj evol i




what is the op? Dry run
----------------------------
		String val="aabbccdduee";
		char[]arr=val.toCharArray();
		boolean isOrdered=true;
		for(int i=1; i< arr.length; i++){
			if(arr[i]<arr[i-1]){
				isOrdered=false;
				break;
			}
		}
		System.out.println(isOrdered);





What is the op? Dry run:
----------------
public class Demo2 {

	public static void main(String[] args) {
		int x[]={2,3,4,-4,5,6,7,9};
		int loc=0;
		int i=0;
		for( i=0;i<x.length; i++){
			if(x[i]==-4)
				break;
			loc++;
		}
		
		int j=loc;
		int k=x.length;
		while(j<k-1){
			x[j]=x[j+1];
			j++;
		}
		
		for(int temp: x)
			System.out.print(temp+":");
	}

}


What is the op?
----------------

public class Demo4 {
	//java Demo3 1 2 3
	public static void main(String[] args) {
		String [][]arguments=new String[2][2];
		int x= 0;
		arguments[0]=args;
		x=arguments[0].length;
		for(int y=0;y<x;y++){
			System.out.println(" "+ arguments[0][y]);
		}
		
	}

}


Dry run:
----------
    class Demo {
        public static void main(String args[])
        {
            int num[] = {5, 10, 11, 12, 56, 2};
            int result;
            result = 0;
            for (int i = 0; i < 6; ++i) 
                result = result + num[i];
	    System.out.print((double)result/6);
 
        } 
    }



Dry run:
--------
public class Demo3 {
	public static void main(String[] args) {

		  char array_variable [] = new char[10];
		    for (int i = 0; i < 10; ++i) {
	                array_variable[i] = 'i';
	                System.out.print(array_variable[i] + "" );
	                i++;
	            }
	}
}


Dry run :
---------
public class Demo3 {
	// java Demo3 1 2 3
	public static void main(String[] args) {
		int arr[][]=new int[3][];
		arr[0]=new int[1];
		arr[1]=new int[2];
		arr[2]=new int[3];
		
		int sum=0;
		for(int i=0;i<3; ++i)
			for(int j=0;j<i+1;++j)
				arr[i][j]=j+1;
		
			for(int i=0;i<3;++i)
				for(int j=0;j<i+1;++j)
					sum+=arr[i][j];
			System.out.println(sum);
	}
}


//Ans : 10























































